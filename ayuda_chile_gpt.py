import streamlit as st
import time
import os
from judini.codegpt.chat import Completion
import requests
import json
from PIL import Image
from semantic_router import Route
from semantic_router.encoders import CohereEncoder
from semantic_router.layer import RouteLayer
import pandas as pd
from dotenv import load_dotenv
load_dotenv()

api_key= os.getenv("CODEGPT_API_KEY")
agent_id= os.getenv("CODEGPT_AGENT_ID")
st.set_page_config(layout="centered")


# create the encoder
encoder = CohereEncoder()

# we could use this as a guide for our chatbot to avoid political conversations
emergencia = Route(
    name="ayuda_chile",
    utterances=[
        "Â¿QuÃ© se sabe sobre la emergencia del incendio?",
        "Â¡La quinta regiÃ³n de Chile se estÃ¡ quemando!",
        "Â¿EstÃ¡ controlado el incendio en la quinta regiÃ³n?",
        "Â¿CÃ³mo puedo ayudar con la emergencia del incendio en la quinta regiÃ³n?",
        "CuÃ©ntame mÃ¡s sobre el incendio en la quinta regiÃ³n.",
        "Â¿QuiÃ©n estÃ¡ luchando contra el incendio en la quinta regiÃ³n?",
        "Â¿CÃ³mo comenzÃ³ el incendio en la quinta regiÃ³n?",
        "Â¿CuÃ¡nto daÃ±o ha causado el incendio en la quinta regiÃ³n?",
        "Â¿Existen planes de recuperaciÃ³n para la quinta regiÃ³n despuÃ©s del incendio?",
        "Â¿CuÃ¡nta gente ha sido afectada por el incendio en la quinta regiÃ³n?",
        "Â¿que centro de ayuda hay en santiago?",
        "Â¿Donde hay centros de Ayuda?",
        "Quiero ayudar",
        "CÃ³mo puedo ayudar?",
        "Donde puedo ayudar?",
        "Quiero donar",
        "CÃ³mo puedo donar?",
        "Donde puedo donar?",
        "Quiero hacer una donaciÃ³n",
        "CÃ³mo puedo hacer una donaciÃ³n?",
        "Donde puedo hacer una donaciÃ³n?",
        "Quiero donar dinero",
        "CÃ³mo puedo donar dinero?",
        "Donde puedo donar dinero?",
        "Quiero donar ropa",
        "CÃ³mo puedo donar ropa?",
        "Donde puedo donar ropa?",
        "Quiero donar comida",
        "CÃ³mo puedo donar comida?",
        "Donde puedo donar comida?",
        "Quiero donar medicinas",
        "CÃ³mo puedo donar medicinas?",
        "Donde puedo donar medicinas?",
        "Quiero donar sangre",
        "CÃ³mo puedo donar sangre?",
        "Donde puedo donar sangre?",
        "Quiero donar tiempo",
        "CÃ³mo puedo donar tiempo?",
    ],
)

# creamos las rutas
routes = [emergencia]

# agrega dos columnas
col1, col2 = st.columns([2,3])

# columna 1 con la imagen
with col1:
    image = Image.open('assets/ayuda_chile_gpt_logo.png')
    st.image(image, width=200)

with col2:
    st.title("AyudaChile GPT ðŸ¤–ðŸ‡¨ðŸ‡±")
    st.write("Soy un agente especialista en responder preguntas sobre centros de ayuda o actualizaciones del estado de emergencia en Chile. ")
    st.write("Estoy aquÃ­ para ayudarte en lo que necesites en relaciÃ³n a la emergencia")

st.write("Proyecto open-source: "+ "https://github.com/davila7/AyudaChileGPT")
st.markdown('---')

def page1():
    st.header("Consulta a AyudaChileGPT")
    # Initialize chat history
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Display chat messages from history on app rerun
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # Accept user input
    if prompt := st.chat_input("Consulta sobre la emergencia"):
        rl = RouteLayer(encoder=encoder, routes=routes)
        route = rl(prompt).name

        # Add user message to chat history
        st.session_state.messages.append({"role": "user", "content": prompt})
        # Display user message in chat message container
        with st.chat_message("user"):
            st.markdown(prompt)

        # Display assistant response in chat message container
        with st.chat_message("assistant"):
            with st.spinner('Cargando respuesta...'):
                message_placeholder = st.empty()
                full_response = ""
                messages = st.session_state.messages
                #st.write(route)
                if(route == 'ayuda_chile'):
                    completion = Completion(api_key)
                    response_completion = completion.create(agent_id, messages, stream=False)
                else:
                    response_completion = "Estoy aquÃ­ para ayudarte en relaciÃ³n a la emergencia"
                    
                for response in response_completion:
                    time.sleep(0.05)
                    full_response += (response or "")
                    message_placeholder.markdown(full_response + "â–Œ")       
                message_placeholder.markdown(full_response)
        st.session_state.messages.append({"role": "assistant", "content": full_response})

def page2():
    st.header("Centros de ayuda verificados")

    # Cargar el archivo csv
    @st.cache_data
    def load_data():
        return pd.read_csv('assets/centros_verificados_v3.csv')

    # Cargar los datos
    df = load_data()

    # Input de texto 
    filtro = st.text_input('Filtrar informaciÃ³n')

    # Filtrar el dataframe 
    df = df[df.apply(lambda row: row.astype(str).str.lower().str.contains(filtro.lower()), axis = 1).any(axis = 1)]

    # Mostrar el dataframe
    st.write(df)

def page3():
    st.title("EN CONSTRUCCIÃ“N")
    # AquÃ­ va todo el contenido de la pÃ¡gina 3

#sidebar
PAGES = {
    "Chat AyudaChileGPT": page1,
    "Centros de Ayuda Verificados": page2,
    "Lista de personas desaparecidas": page3
}

st.sidebar.title('NavegaciÃ³n')
selection = st.sidebar.radio("Ir a", list(PAGES.keys()))
page = PAGES[selection]

# Mostrar la pÃ¡gina seleccionada con el radio button
page()






